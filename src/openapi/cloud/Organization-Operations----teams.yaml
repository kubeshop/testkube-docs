openapi: 3.0.1
info:
  title: Testkube Pro API
  description: API for Testkube Pro
  contact:
    email: testkube@kubeshop.io
  license:
    name: COMMERICAL
    url: https://opensource.org/licenses/MIT
  version: 1.16.0-de.53
servers:
  - url: https://api.testkube.io
    description: Testkube Cloud API Endpoint
  - url: https://<your-testkube-api-host>
    description: Testkube On-Prem API Endpoint
paths:
  /organizations/{id}/teams:
    get:
      summary: List organization teams
      description: Lists the teams in an organization.
      operationId: listTeams
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components.yaml#/components/schemas/Team'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
      security:
        - BearerAuth: []
    post:
      summary: Create a team
      description: Creates a team.
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Display name of the team
                  type: string
                slug:
                  description: Human- and URL friendly identifier.
                  type: string
                description:
                  description: Description of the team
                  type: string
              required:
                - name
        required: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: './components.yaml#/components/schemas/Team'
        '400':
          $ref: './components.yaml#/components/responses/BadRequestError'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
      security:
        - BearerAuth: []
    parameters:
      - $ref: './components.yaml#/components/parameters/ID'
  /organizations/{id}/teams/{teamID}:
    get:
      summary: Get a team
      description: Get a team by its `id` or `slug.
      operationId: getTeam
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: './components.yaml#/components/schemas/Team'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '404':
          $ref: './components.yaml#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    delete:
      summary: Delete a team
      description: Deletes a team.
      operationId: deleteTeam
      responses:
        '204':
          description: Delete Success
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './components.yaml#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    patch:
      summary: Update a team
      description: Updates a team's information.
      operationId: updateTeam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new name of the team.
                  type: string
                description:
                  description: The new description of this team.
                  type: string
                slug:
                  description: The new slug of this team.
                  type: string
        required: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: './components.yaml#/components/schemas/Team'
        '400':
          $ref: './components.yaml#/components/responses/BadRequestError'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './components.yaml#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    parameters:
      - $ref: './components.yaml#/components/parameters/ID'
      - $ref: './components.yaml#/components/parameters/TeamID'
  /organizations/{id}/teams/{teamID}/members:
    get:
      summary: Lists all members for this team
      description: Lists all members for this team.
      operationId: listTeamMembers
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './components.yaml#/components/schemas/TeamMember'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './components.yaml#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    post:
      summary: Adds members to this team
      description: Adds many members to this team.
      operationId: addTeamMembers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: The users to add to this environment.
                  type: array
                  items:
                    type: string
              required:
                - users
        required: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: './components.yaml#/components/schemas/TeamMember'
                  failed:
                    type: array
                    items:
                      type: string
        '400':
          $ref: './components.yaml#/components/responses/BadRequestError'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './components.yaml#/components/responses/NotFoundError'
        '429':
          $ref: './components.yaml#/components/responses/TooManyRequests'
      security:
        - BearerAuth: []
    delete:
      summary: Remove many members from this team
      description: Remove many members from this team.
      operationId: removeTeamMembers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                users:
                  description: The users to remove from this team.
                  type: array
                  items:
                    type: string
              required:
                - users
        required: true
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  failed:
                    type: array
                    items:
                      type: string
        '400':
          $ref: './components.yaml#/components/responses/BadRequestError'
        '401':
          $ref: './components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './components.yaml#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    parameters:
      - $ref: './components.yaml#/components/parameters/ID'
      - $ref: './components.yaml#/components/parameters/TeamID'
